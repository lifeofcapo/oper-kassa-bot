import os
import firebase_admin
from firebase_admin import credentials, db
import logging
from datetime import datetime
import telebot
from telebot import types
import json

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN', '8257056060:AAEJjN5nJ2deXu8KfvmeCoFfi40NqoSkPr0')
BOT_PASSWORD = os.getenv('BOT_PASSWORD', 'operkassa2020')  

#–ª–æ–≥
logging.basicConfig(
    level=logging.INFO, 
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot.log', encoding='utf-8')
    ]
)

bot = telebot.TeleBot(TELEGRAM_TOKEN)
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
authorized_users = {}

try:
    if os.path.exists("serviceAccountKey.json"):
        cred = credentials.Certificate("serviceAccountKey.json")
    else:
        service_account_info = {
            "type": "service_account",
            "project_id": os.getenv('FIREBASE_PROJECT_ID', 'oper-kassa'),
            "private_key_id": os.getenv('FIREBASE_PRIVATE_KEY_ID', ''),
            "private_key": os.getenv('FIREBASE_PRIVATE_KEY', '').replace('\\n', '\n'),
            "client_email": os.getenv('FIREBASE_CLIENT_EMAIL', ''),
            "client_id": os.getenv('FIREBASE_CLIENT_ID', ''),
            "auth_uri": "https://accounts.google.com/o/oauth2/auth",
            "token_uri": "https://oauth2.googleapis.com/token",
            "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
            "client_x509_cert_url": os.getenv('FIREBASE_CLIENT_CERT_URL', '')
        }
        cred = credentials.Certificate(service_account_info)
    
    firebase_admin.initialize_app(cred, {
        'databaseURL': 'https://oper-kassa-default-rtdb.europe-west1.firebasedatabase.app'
    })
    logging.info("Firebase initialized successfully")
except Exception as e:
    logging.error(f"Firebase initialization failed: {e}")

class CurrencyManager:
    def __init__(self):
        self.currencies_structure = [
            {'code': 'USD_WHITE', 'flag': 'us', 'name': '–î–æ–ª–ª–∞—Ä –°–®–ê (–±–µ–ª—ã–π)', 'showRates': True},
            {'code': 'USD_BLUE', 'flag': 'us', 'name': '–î–æ–ª–ª–∞—Ä –°–®–ê (—Å–∏–Ω–∏–π)', 'showRates': True},
            {'code': 'EUR', 'flag': 'eu', 'name': '–ï–≤—Ä–æ', 'showRates': True},
            {'code': 'GBP', 'flag': 'gb', 'name': '–§—É–Ω—Ç —Å—Ç–µ—Ä–ª–∏–Ω–≥–æ–≤', 'showRates': False},
            {'code': 'CNY', 'flag': 'cn', 'name': '–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å', 'showRates': False},
            {'code': 'RUB', 'flag': 'ru', 'name': '–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å', 'showRates': True}
        ]
    
    def get_current_rates(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –∏–∑ Firebase"""
        try:
            ref = db.reference('/currencies')
            rates = ref.get()
            if rates is None:
                # –ï—Å–ª–∏ –≤ Firebase –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–º–∏
                self.initialize_rates()
                return self.get_current_rates()
            return rates
        except Exception as e:
            logging.error(f"Error getting rates: {e}")
            return []
    
    def initialize_rates(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Firebase –±–∞–∑–æ–≤—ã–º–∏ –∫—É—Ä—Å–∞–º–∏"""
        try:
            ref = db.reference('/currencies')
            initial_rates = []
            for currency in self.currencies_structure:
                curr = currency.copy()
                if curr['showRates']:
                    if curr['code'] == 'USD_WHITE':
                        curr.update({'buy': 95.5, 'sell': 97.8})
                    elif curr['code'] == 'USD_BLUE':
                        curr.update({'buy': 94.0, 'sell': 96.5})
                    elif curr['code'] == 'EUR':
                        curr.update({'buy': 105.2, 'sell': 107.9})
                    elif curr['code'] == 'RUB':
                        curr.update({'buy': 1.0, 'sell': 1.0})
                    else:
                        curr.update({'buy': 0.0, 'sell': 0.0})
                else:
                    curr.update({'buy': 0.0, 'sell': 0.0})
                curr['updated'] = datetime.now().isoformat()
                initial_rates.append(curr)
            
            ref.set(initial_rates)
            logging.info("Initial rates set in Firebase")
        except Exception as e:
            logging.error(f"Error initializing rates: {e}")
    
    def update_currency_rate(self, currency_code, buy_rate, sell_rate):
        """–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–ª—é—Ç—ã"""
        try:
            ref = db.reference('/currencies')
            current_rates = ref.get() or []
            
            updated = False
            for currency in current_rates:
                if currency['code'] == currency_code:
                    currency['buy'] = float(buy_rate)
                    currency['sell'] = float(sell_rate)
                    currency['updated'] = datetime.now().isoformat()
                    updated = True
                    break
            if not updated:
                for base_currency in self.currencies_structure:
                    if base_currency['code'] == currency_code:
                        new_currency = base_currency.copy()
                        new_currency['buy'] = float(buy_rate)
                        new_currency['sell'] = float(sell_rate)
                        new_currency['updated'] = datetime.now().isoformat()
                        current_rates.append(new_currency)
                        break
            
            ref.set(current_rates)
            logging.info(f"Updated {currency_code}: buy={buy_rate}, sell={sell_rate}")
            return True
            
        except Exception as e:
            logging.error(f"Error updating rate: {e}")
            return False

currency_manager = CurrencyManager()

def is_authorized(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return authorized_users.get(user_id, False)

def require_auth(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    def wrapper(message):
        if not is_authorized(message.from_user.id):
            bot.send_message(
                message.chat.id, 
                "üîí *–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!*\n\n"
                "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /auth –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è.",
                parse_mode='Markdown'
            )
            return
        return func(message)
    return wrapper

@bot.message_handler(commands=['start'])
def send_welcome(message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('üìä –¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã')
    btn2 = types.KeyboardButton('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å')
    btn3 = types.KeyboardButton('üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ')
    btn4 = types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å')
    
    if is_authorized(message.from_user.id):
        btn5 = types.KeyboardButton('üö™ –í—ã–π—Ç–∏')
        markup.add(btn1, btn2, btn3, btn4, btn5)
    else:
        btn5 = types.KeyboardButton('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è')
        markup.add(btn1, btn2, btn3, btn4, btn5)
    
    status = "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" if is_authorized(message.from_user.id) else "‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
    
    bot.send_message(
        message.chat.id,
        f"üí± *–ë–æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç*\n\n"
        f"–°—Ç–∞—Ç—É—Å: {status}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode='Markdown',
        reply_markup=markup
    )

@bot.message_handler(commands=['auth'])
@bot.message_handler(func=lambda message: message.text == 'üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è')
def handle_auth(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    if is_authorized(message.from_user.id):
        bot.send_message(message.chat.id, "‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
        return
    
    msg = bot.send_message(
        message.chat.id,
        "üîí *–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫—É—Ä—Å–∞–º–∏:",
        parse_mode='Markdown'
    )
    bot.register_next_step_handler(msg, process_password)

def process_password(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è"""
    if message.text == BOT_PASSWORD:
        authorized_users[message.from_user.id] = True
        bot.send_message(
            message.chat.id,
            "‚úÖ *–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!*\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç.",
            parse_mode='Markdown'
        )
        send_welcome(message)
    else:
        bot.send_message(
            message.chat.id,
            "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!*\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode='Markdown'
        )

@bot.message_handler(func=lambda message: message.text == 'üö™ –í—ã–π—Ç–∏')
def handle_logout(message):
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    if message.from_user.id in authorized_users:
        del authorized_users[message.from_user.id]
    bot.send_message(message.chat.id, "üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.")
    send_welcome(message)

@bot.message_handler(commands=['rates'])
@bot.message_handler(func=lambda message: message.text == 'üìä –¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã')
def show_current_rates(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã"""
    rates = currency_manager.get_current_rates()
    
    if not rates:
        bot.send_message(message.chat.id, "‚ùå –ö—É—Ä—Å—ã –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return
    
    response = "üí± *–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã:*\n\n"
    for currency in rates:
        status = "‚úÖ" if currency.get('showRates', False) else "‚ùå"
        if currency.get('showRates', False):
            response += f"{status} *{currency['name']}*\n"
            response += f"   –ü–æ–∫—É–ø–∫–∞: `{currency.get('buy', 0):.2f} ‚ÇΩ`\n"
            response += f"   –ü—Ä–æ–¥–∞–∂–∞: `{currency.get('sell', 0):.2f} ‚ÇΩ`\n"
        else:
            response += f"{status} *{currency['name']}* ‚Äî —É—Ç–æ—á–Ω—è–π—Ç–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É\n"
        
        if currency.get('updated'):
            try:
                updated_time = datetime.fromisoformat(currency['updated']).strftime('%H:%M')
                response += f"   _–û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_time}_\n"
            except:
                pass
        
        response += "\n"
    
    bot.send_message(message.chat.id, response, parse_mode='Markdown')

@bot.message_handler(func=lambda message: message.text == '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å')
@require_auth
def handle_change_rate(message):
    """–í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞"""
    rates = currency_manager.get_current_rates()
    
    if not rates:
        bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    markup = types.InlineKeyboardMarkup(row_width=2)
    
    for currency in rates:
        btn = types.InlineKeyboardButton(
            text=currency['name'],
            callback_data=f"edit_{currency['code']}"
        )
        markup.add(btn)
    
    cancel_btn = types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    markup.add(cancel_btn)
    
    bot.send_message(
        message.chat.id,
        "üí∞ *–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞:*",
        parse_mode='Markdown',
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('edit_'))
def handle_edit_currency(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if not is_authorized(call.from_user.id):
        bot.answer_callback_query(call.id, "‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!", show_alert=True)
        return
    
    currency_code = call.data.replace('edit_', '')
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–ª—é—Ç–µ
    rates = currency_manager.get_current_rates()
    currency_info = next((c for c in rates if c['code'] == currency_code), None)
    
    if not currency_info:
        bot.answer_callback_query(call.id, "‚ùå –í–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    msg = bot.send_message(
        call.message.chat.id,
        f"‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {currency_info['name']}*\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å *–ø–æ–∫—É–ø–∫–∏* (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 95.5):",
        parse_mode='Markdown'
    )
    
    bot.register_next_step_handler(msg, process_buy_rate, currency_code)

def process_buy_rate(message, currency_code):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫—É—Ä—Å–∞ –ø–æ–∫—É–ø–∫–∏"""
    if not is_authorized(message.from_user.id):
        bot.send_message(message.chat.id, "‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞.")
        return
        
    try:
        buy_rate = float(message.text.replace(',', '.'))
        
        if buy_rate <= 0:
            bot.send_message(message.chat.id, "‚ùå –ö—É—Ä—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            bot.register_next_step_handler(message, process_buy_rate, currency_code)
            return
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏
        msg = bot.send_message(
            message.chat.id,
            f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å *–ø—Ä–æ–¥–∞–∂–∏* (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 97.8):",
            parse_mode='Markdown'
        )
        
        bot.register_next_step_handler(msg, process_sell_rate, currency_code, buy_rate)
        
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 95.5):")
        bot.register_next_step_handler(message, process_buy_rate, currency_code)

def process_sell_rate(message, currency_code, buy_rate):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫—É—Ä—Å–∞ –ø—Ä–æ–¥–∞–∂–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"""
    if not is_authorized(message.from_user.id):
        bot.send_message(message.chat.id, "‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞.")
        return
        
    try:
        sell_rate = float(message.text.replace(',', '.'))
        
        if sell_rate <= 0:
            bot.send_message(message.chat.id, "‚ùå –ö—É—Ä—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            bot.register_next_step_handler(message, process_sell_rate, currency_code, buy_rate)
            return
        
        if sell_rate <= buy_rate:
            bot.send_message(message.chat.id, "‚ùå –ö—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ –∫—É—Ä—Å–∞ –ø–æ–∫—É–ø–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            bot.register_next_step_handler(message, process_sell_rate, currency_code, buy_rate)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É—Ä—Å—ã –≤ Firebase
        success = currency_manager.update_currency_rate(currency_code, buy_rate, sell_rate)
        
        if success:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–ª—é—Ç–µ
            rates = currency_manager.get_current_rates()
            currency_info = next((c for c in rates if c['code'] == currency_code), None)
            
            response = f"‚úÖ *–ö—É—Ä—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!*\n\n"
            response += f"*{currency_info['name'] if currency_info else currency_code}*\n"
            response += f"üè¶ –ü–æ–∫—É–ø–∫–∞: `{buy_rate:.2f} ‚ÇΩ`\n"
            response += f"üí∏ –ü—Ä–æ–¥–∞–∂–∞: `{sell_rate:.2f} ‚ÇΩ`\n"
            response += f"üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M')}"
            
            bot.send_message(message.chat.id, response, parse_mode='Markdown')
        else:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 97.8):")
        bot.register_next_step_handler(message, process_sell_rate, currency_code, buy_rate)

@bot.callback_query_handler(func=lambda call: call.data == 'cancel')
def handle_cancel(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã"""
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.answer_callback_query(call.id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

@bot.message_handler(func=lambda message: message.text == 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ')
@require_auth
def handle_update_all(message):
    """–û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∫—É—Ä—Å—ã"""
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    # –ù–∞–ø—Ä–∏–º–µ—Ä, —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç
    bot.send_message(message.chat.id, "üîÑ –§—É–Ω–∫—Ü–∏—è –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

@bot.message_handler(func=lambda message: message.text == '‚ùì –ü–æ–º–æ—â—å')
@bot.message_handler(commands=['help'])
def send_help(message):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    help_text = """
üí± *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

*/start* - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
*/rates* - –¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã
*/auth* - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
*/help* - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*–ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏:*
üìä –¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫—É—Ä—Å—ã
‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å - –ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã (—Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ - –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è - –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
üö™ –í—ã–π—Ç–∏ - –í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
‚ùì –ü–æ–º–æ—â—å - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é –∫—É—Ä—Å–∞:*
1. –ù–∞–∂–º–∏—Ç–µ *"üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"* –∏ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å
2. –ù–∞–∂–º–∏—Ç–µ *"‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å"*
3. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞
4. –í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å –ø–æ–∫—É–ø–∫–∏
5. –í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏
6. –ö—É—Ä—Å—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤—è—Ç—Å—è –Ω–∞ —Å–∞–π—Ç–µ

*–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:* –ö—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ –∫—É—Ä—Å–∞ –ø–æ–∫—É–ø–∫–∏.

*–ü–∞—Ä–æ–ª—å:* `oper2025`
"""
    bot.send_message(message.chat.id, help_text, parse_mode='Markdown')

@bot.message_handler(content_types=['text'])
def handle_other_messages(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if message.text not in ['üìä –¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã', '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å', 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ', '‚ùì –ü–æ–º–æ—â—å', 'üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', 'üö™ –í—ã–π—Ç–∏']:
        bot.send_message(
            message.chat.id, 
            "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
        )

if __name__ == "__main__":
    logging.info("Currency bot started...")
    logging.info(f"Bot password: {BOT_PASSWORD}")
    
    try:
        rates = currency_manager.get_current_rates()
        logging.info(f"Loaded {len(rates)} currencies from Firebase")
    except Exception as e:
        logging.error(f"Failed to load currencies: {e}")
    
    try:
        bot.infinity_polling()
    except Exception as e:
        logging.error(f"Bot stopped with error: {e}")